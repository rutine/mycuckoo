<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
    说明: DicBigTypeMapper映射文件
    
    @author rutine
    @time Sep 23, 2014 9:36:48 AM
    @version 3.0.0
 -->
<mapper namespace="com.mycuckoo.repository.platform.DictBigTypeMapper">
    <resultMap id="baseMap" type="com.mycuckoo.domain.platform.DictBigType">
        <id property="bigTypeId" column="big_type_id" />
        <result property="code" column="code" />
        <result property="name" column="name" />
        <result property="memo" column="memo" />
        <result property="status" column="status" />
        <result property="updater" column="updater" />
        <result property="updateDate" column="update_date" />
        <result property="creator" column="creator" />
        <result property="createDate" column="create_date" />
    </resultMap>
    
    <sql id="columns">
        big_type_id, code, name, memo, status, updater, update_date, creator, create_date
    </sql>
    
    <sql id="table">
        cuckoo.sys_dict_big_type
    </sql>

    <!-- 插入字典大类： 1.由数据库生成id并赋值到DicBigType对象 -->
    <insert id="save" parameterType="com.mycuckoo.domain.platform.DictBigType"
            useGeneratedKeys="true" keyProperty="bigTypeId" keyColumn="big_type_id">
        insert into <include refid="table" /> (
            big_type_id,
            code,
            name,
            memo,
            status,
            updater,
            update_date,
            creator,
            create_date
        )
        values (
            #{bigTypeId},
            #{code},
            #{name},
            #{memo},
            #{status},
            #{updater},
            #{updateDate},
            #{creator},
            #{createDate}
        )
    </insert>
    
    <!-- 更新字典大类： 1.输入对象参数  -->
    <update id="update" parameterType="com.mycuckoo.domain.platform.DictBigType">
        update <include refid="table" />
        <set>
            <if test="code != null">code = #{code}, </if>
            <if test="name != null">name = #{name}, </if>
            <if test="memo != null">memo = #{memo}, </if>
            <if test="status != null">status = #{status}, </if>
            <if test="updater != null">updater = #{updater}, </if>
            <if test="updateDate != null">update_date = #{updateDate}, </if>
        </set>
        where big_type_id = #{bigTypeId}
    </update>
    
    <!-- 删除字典大类 -->
    <delete id="delete" parameterType="long">
        delete from <include refid="table" /> where big_type_id = #{id}
    </delete>
    
        <!--
        获取字典大类: 输出直接映射到对象
    -->
    <select id="get" parameterType="long" resultMap="baseMap">
        select <include refid="columns" />
        from <include refid="table" />
        where big_type_id = #{id}
    </select>
    
    <!-- 判断字典大类是否存在 -->
    <select id="exists" parameterType="long" resultType="boolean">
        select count(1) > 0
        from <include refid="table" />
        where big_type_id = #{id}
    </select>
    
    <!-- 根据字典大类名称及代码分页查询字典大类 -->
    <select id="findByPage" parameterType="map" resultMap="baseMap">
        select <include refid="columns" />
        from <include refid="table" />
        <where>
            <if test="code != null">
                code like #{code}
            </if>
            <if test="name != null">
                and name like #{name}
            </if>
        </where>
        order by big_type_id desc
    </select>
    
    <!-- 统计字典大类记录总数 -->
    <select id="count" resultType="long">
        select count(1)
        from <include refid="table" />
    </select>
    
        <!-- 根据编码统计字典大类数量 -->
    <select id="countByCode" parameterType="string" resultType="int">
        select count(1)
        from <include refid="table" />
        where code = #{code}
    </select>
    
    <!-- 根据字典大类ID修改字典大类状态 -->
    <update id="updateStatus">
        update <include refid="table" />
        set status = #{status}
        where big_type_id = #{bigTypeId}
    </update>
    
</mapper> 
