<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	说明: GroupMapper映射文件
	
	@author rutine
	@time Sep 23, 2014 10:32:14 AM
	@version 3.0.0
 -->
<mapper namespace="com.mycuckoo.repository.uum.group.GroupMapper">
	<resultMap id="baseMap" type="com.mycuckoo.domain.uum.Group">
		<id property="groupId" column="group_id" />
		<result property="groupType" column="group_type" />
		<result property="groupName" column="group_name" />
		<result property="memo" column="memo" />
		<result property="status" column="status" />
		<result property="creator" column="creator" />
		<result property="createDate" column="create_date" />
		<collection property="groupMembers" column="group_id" 
				ofType="com.mycuckoo.domain.uum.GroupMember" select="com.mycuckoo.repository.uum.group.GroupMemberMapper.findByGroupId" />
	</resultMap>
	
	<sql id="colums">
		group_id, group_type, group_name, memo, status, creator, create_date
	</sql>
	
	<sql id="table">
		cuckoo.uum_group
	</sql>

	<!-- 插入分组： 1.由数据库生成id并赋值到UumGroup对象 2.输入用对象 -->
	<insert id="save" parameterType="com.mycuckoo.domain.uum.Group">
		<selectKey keyProperty="groupId" resultType="long" order="BEFORE">
			select nextval('cuckoo.uum_group_seq')
		</selectKey>
		insert into <include refid="table" />
		(
			group_id, group_type, group_name, memo, status, creator, create_date
		)
		values (
			#{groupId}, #{groupType}, #{groupName}, #{memo}, #{status}, #{creator}, #{createDate}
		)
	</insert>
	
	<!-- 更新分组： 1.输入用对象 -->
	<update id="update" parameterType="com.mycuckoo.domain.uum.Group">
		update 
			<include refid="table" />
		<set>
			<if test="groupType != null">group_type = #{groupType}, </if>
			<if test="groupName != null">group_name = #{groupName}, </if>
			<if test="memo != null">memo = #{memo}, </if>
			<if test="status != null">status = #{status}, </if>
		</set>
		where 
			group_id = #{groupId}
	</update>
	
	<!-- 删除分组 -->
	<delete id="delete" parameterType="long">
		delete from <include refid="table" /> where group_id = #{id}
	</delete>
	
	<!--
		获取分组: 映射到 uumGroup
	-->
	<select id="get" parameterType="long" resultMap="baseMap">
		select 
			<include refid="colums" />
		from 
			<include refid="table" />
		where 
			group_id = #{id}
	</select>
	
	<!-- 分组是否存在 -->
	<select id="exists" parameterType="long" resultType="boolean">
		select
			count(1) > 0 
		from 
			<include refid="table" />
		where 
			group_id = #{id}
	</select>

	<!-- 根据条件分页查询组信息 -->
	<select id="findByPage"  parameterType="map" resultMap="baseMap">
		select
			<include refid="colums" />
		from 
			<include refid="table" />
		where
			group_type = #{groupType}
		<if test="groupName != null and groupName != ''">
			and group_name like #{groupName}
		</if>
		order by group_id desc
	</select>
	
		<!-- 分组记录总数 -->
	<select id="count" resultType="long">
		select
			count(1) 
		from 
			<include refid="table" />
	</select>
	
	<!-- 根据组名称查询组数量 -->
	<select id="countByGroupName" parameterType="map" resultType="int">
		select
			count(1) 
		from 
			<include refid="table" />
		where 
			group_name = #{groupName}
		and 
			group_type = #{groupType}
	</select>
	
	<!-- 根据组ID修改组状态 -->
	<update id="updateStatus" parameterType="map">
		update 
			<include refid="table" />
		set
			status					= #{status}
		where 
			group_id = #{groupId}
	</update>
	
</mapper> 
