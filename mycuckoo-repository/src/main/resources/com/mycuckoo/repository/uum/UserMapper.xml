<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
    说明: UserMapper映射文件
    
    @author rutine
    @time Sep 23, 2014 10:23:58 AM
    @version 3.0.0
 -->
<mapper namespace="com.mycuckoo.repository.uum.UserMapper">
    <resultMap id="baseMap" type="com.mycuckoo.domain.uum.UserExtend">
        <id property="userId" column="user_id" />

        <result property="code" column="code" />
        <result property="name" column="name" />
        <result property="pinyin" column="pinyin" />
        <result property="phone" column="phone" />
        <result property="email" column="email" />
        <result property="password" column="password" />
        <result property="gender" column="gender" />
        <result property="position" column="position" />
        <result property="photoUrl" column="photo_url" />
        <result property="qq" column="qq" />
        <result property="wechat" column="wechat" />
        <result property="officeTel" column="office_tel" />
        <result property="familyTel" column="family_tel" />
        <result property="address" column="address" />
        <result property="avidate" column="avidate" />
        <result property="belongOrg" column="belong_org" />
        <result property="memo" column="memo" />
        <result property="status" column="status" />
        <result property="updater" column="updater" />
        <result property="updateDate" column="update_date" />
        <result property="creator" column="creator" />
        <result property="createDate" column="create_date" />
        <!-- 其他用途 -->
        <result property="orgRoleId" column="org_role_id" />
        <result property="roleName" column="role_name" />
        <result property="orgName" column="org_name" />
    </resultMap>

    <sql id="columns">
        user_id, code, name, pinyin, phone, email,
        password, gender, position, photo_url,
        qq, wechat, office_tel, family_tel,
        address, avidate, belong_org, memo, status,
        updater, update_date, creator, create_date
    </sql>

    <sql id="table">
        cuckoo.uum_user
    </sql>

    <!-- 插入用户： 1.由数据库生成id并赋值到user对象 2.输入用对象, 嵌套属性表达式#{department.id} -->
    <insert id="save" parameterType="com.mycuckoo.domain.uum.User"
            useGeneratedKeys="true" keyProperty="userId" keyColumn="user_id">
        insert into <include refid="table" />
        (
            user_id,
            code,
            name,
            pinyin,
            phone,
            email,
            password,
            gender,
            position,
            photo_url,
            qq,
            wechat,
            office_tel,
            family_tel,
            address,
            avidate,
            belong_org,
            memo,
            status,
            updater,
            update_date,
            creator,
            create_date
        )
        values (
            #{userId},
            #{code},
            #{name},
            #{pinyin},
            #{phone},
            #{email},
            #{password},
            #{gender},
            #{position},
            #{photoUrl},
            #{qq},
            #{wechat},
            #{officeTel},
            #{familyTel},
            #{address},
            #{avidate},
            #{belongOrg},
            #{memo},
            #{status},
            #{updater},
            #{updateDate},
            #{creator},
            #{createDate}
        )
    </insert>

    <!-- 更新用户： 1.输入用对象 -->
    <update id="update" parameterType="com.mycuckoo.domain.uum.User">
        update <include refid="table" />
        <set>
            <if test="code != null">code = #{code}, </if>
            <if test="name != null">name = #{name}, </if>
            <if test="pinyin != null">pinyin = #{pinyin}, </if>
            <if test="phone != null">phone = #{phone}, </if>
            <if test="email != null">email = #{email}, </if>
            <if test="password != null">password = #{password}, </if>
            <if test="gender != null">gender = #{gender}, </if>
            <if test="position != null">position = #{position}, </if>
            <if test="photoUrl != null">photo_url = #{photoUrl}, </if>
            <if test="qq != null">qq = #{qq}, </if>
            <if test="wechat != null">wechat = #{wechat}, </if>
            <if test="officeTel != null">office_tel = #{officeTel}, </if>
            <if test="familyTel != null">family_tel = #{familyTel}, </if>
            <if test="address != null">address = #{address}, </if>
            <if test="avidate != null">avidate = #{avidate}, </if>
            <if test="belongOrg != null">belong_org = #{belongOrg}, </if>
            <if test="memo != null">memo = #{memo}, </if>
            <if test="status != null">status = #{status}, </if>
            <if test="updater != null">updater = #{updater}, </if>
            <if test="updateDate != null">update_date = #{updateDate}, </if>
        </set>
        where user_id = #{userId}
    </update>

    <!-- 删除单个用户 -->
    <delete id="delete" parameterType="long">
        delete from <include refid="table" /> where user_id = #{userId}
    </delete>

    <!--
        获取用户: 输出直接映射到对象
    -->
    <select id="get" parameterType="long" resultMap="baseMap">
        select <include refid="columns" />
        from <include refid="table" />
        where user_id=#{id}
    </select>

    <!-- 判断用户是否存在 -->
    <select id="exists" parameterType="long" resultType="boolean">
        select count(user_id) > 0
        from <include refid="table" />
        where user_id=#{id}
    </select>

    <!-- 返回所有用户,映射到'uumUser'-->
    <select id="findByPage" resultMap="baseMap">
        select <include refid="columns" />
        from <include refid="table" />
    </select>

    <!-- 统计用户记录总数 -->
    <select id="count" resultType="long">
        select count(1)
        from <include refid="table" />
    </select>

    <!-- 根据用户代码、用户名称查询用户记录, 演示: 1.输入传入多个参数 2.输出直接映射对象 -->
    <select id="findByCodeAndName" resultMap="baseMap">
        select
            t1.*,
            t2.simple_name org_name,
            t4.org_role_id,
            t5.name role_name
        from <include refid="table" /> t1
        left join cuckoo.uum_organ t2 on t1.belong_org = t2.org_id
        left join cuckoo.uum_user_org_role_ref t3 on t1.user_id = t3.user_id and t3.is_default = 'Y' <!-- 默认角色 -->
        left join cuckoo.uum_org_role_ref t4 on t3.org_role_id = t4.org_role_id
        left join cuckoo.uum_role t5 on t4.role_id = t5.role_id
        <where>
            <if test="code != null and code != ''">and t1.code like #{code}</if>
            <if test="name != null and name != ''">and t1.name like #{name}</if>
        </where>
        order by user_id desc
    </select>

    <!-- 根据用户代码、用户名称、机构ids或角色ids查询用户记录, 演示: 1.输入传入多个参数 2.输出直接映射对象 -->
    <select id="findByPage2" resultMap="baseMap">
        select
            t1.*,
            t2.simple_name org_name,
            t4.org_role_id,
            t5.name role_name
        from <include refid="table" /> t1
        left join cuckoo.uum_organ t2 on t1.belong_org = t2.org_id
        left join cuckoo.uum_user_org_role_ref t3 on t1.user_id = t3.user_id and t3.is_default = 'Y' <!-- 默认角色 -->
        left join cuckoo.uum_org_role_ref t4 on t3.org_role_id = t4.org_role_id
        left join cuckoo.uum_role t5 on t4.role_id = t5.role_id
        <where>
            <if test="orgIds != null">
                and t1.belong_org in
                <foreach collection="orgIds" item="orgId" open="(" separator="," close=")">#{orgId}</foreach>
            </if>
            <if test="orgRoleId != null">
                and t1.user_id in (select st1.user_id from cuckoo.uum_user_org_role_ref st1 where st1.org_role_id = #{orgRoleId})
            </if>
            <if test="code != null and code != ''">and t1.code like #{code}</if>
            <if test="name != null and name != ''">and t1.name like #{name}</if>
        </where>
        order by t1.user_id desc
    </select>

    <!-- 判断用户号是否存在 -->
    <select id="existsByUserCode" parameterType="string" resultType="boolean">
        select count(1) > 0
        from <include refid="table" />
        where code = #{code}
    </select>

        <!-- 查询用户,演示: 1.输入用map传入多个参数 2.<where>语句, 智能添加where和and关键字 3.输出直接映射对象 -->
    <select id="getByUserCode" parameterType="com.mycuckoo.domain.uum.User" resultMap="baseMap">
        select <include refid="columns"/>
        from <include refid="table" />
        where code = #{code}
    </select>

    <!-- 根据拼音代码查询用户信息 -->
    <select id="findByPinyin" parameterType="com.mycuckoo.domain.uum.User" resultType="map">
        select
            user_id   as "userId",
            name as "name"
        from <include refid="table" />
        where pinyin like #{pinyin}
        and user_id != #{userId}
    </select>

    <!-- 根据指定的用户ID集合查询用户信息 -->
    <select id="findByUserIds" resultMap="baseMap">
        select
            user_id,
            name
        from <include refid="table" />
        <where> user_id in
        <foreach collection="array" item="userId" open="(" separator="," close=")">
            #{userId}
        </foreach>
        </where>
    </select>

</mapper> 