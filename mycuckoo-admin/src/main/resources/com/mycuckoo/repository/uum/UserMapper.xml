<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
    说明: UserMapper映射文件
    
    @author rutine
    @time Sep 23, 2014 10:23:58 AM
    @version 3.0.0
 -->
<mapper namespace="com.mycuckoo.repository.uum.UserMapper">
    <resultMap id="baseMap" type="com.mycuckoo.domain.uum.UserExtend">
        <id property="userId" column="user_id" />
        <result property="orgId" column="org_id" />
        <result property="accountId" column="account_id" />
        <result property="roleId" column="role_id" />
        <result property="deptId" column="dept_id" />
        <result property="name" column="name" />
        <result property="pinyin" column="pinyin" />
        <result property="phone" column="phone" />
        <result property="email" column="email" />
        <result property="gender" column="gender" />
        <result property="position" column="position" />
        <result property="photoUrl" column="photo_url" />
        <result property="address" column="address" />
        <result property="avidate" column="avidate" />
        <result property="memo" column="memo" />
        <result property="status" column="status" />
        <result property="updator" column="updator" />
        <result property="updateTime" column="update_time" />
        <result property="creator" column="creator" />
        <result property="createTime" column="create_time" />
        <!-- 其他用途 -->
        <result property="roleName" column="role_name" />
        <result property="orgName" column="org_name" />
    </resultMap>

    <sql id="columns">
        user_id, org_id, account_id, role_id, dept_id,
        name, pinyin, phone, email,
        gender, position, photo_url,
        address, avidate, memo, status,
        updator, update_time, creator, create_time
    </sql>

    <sql id="table">
        cuckoo.uum_user
    </sql>

    <!-- 插入用户： 1.由数据库生成id并赋值到user对象 2.输入用对象, 嵌套属性表达式#{department.id} -->
    <insert id="save" parameterType="com.mycuckoo.domain.uum.User"
            useGeneratedKeys="true" keyProperty="userId" keyColumn="user_id">
        insert into <include refid="table" />
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id, </if>
            <if test="orgId != null">org_id, </if>
            <if test="accountId != null">account_id, </if>
            <if test="roleId != null">role_id, </if>
            <if test="deptId != null">dept_id, </if>
            <if test="name != null and name != ''">name, </if>
            <if test="pinyin != null and pinyin != ''">pinyin, </if>
            <if test="phone != null and phone != ''">phone, </if>
            <if test="email != null and email != ''">email, </if>
            <if test="gender != null and gender != ''">gender, </if>
            <if test="position != null and position != ''">position, </if>
            <if test="photoUrl != null and photoUrl != ''">photo_url, </if>
            <if test="address != null and address != ''">address, </if>
            <if test="avidate != null">avidate, </if>
            <if test="memo != null and memo != ''">memo, </if>
            <if test="status != null">status, </if>
            <if test="updator != null">updator, </if>
            <if test="updateTime != null">update_time, </if>
            <if test="creator != null">creator, </if>
            <if test="createTime != null">create_time, </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId}, </if>
            <if test="orgId != null">#{orgId}, </if>
            <if test="accountId != null">#{accountId}, </if>
            <if test="roleId != null">#{roleId}, </if>
            <if test="deptId != null">#{deptId}, </if>
            <if test="name != null and name != ''">#{name}, </if>
            <if test="pinyin != null and pinyin != ''">#{pinyin}, </if>
            <if test="phone != null and phone != ''">#{phone}, </if>
            <if test="email != null and email != ''">#{email}, </if>
            <if test="gender != null and gender != ''">#{gender}, </if>
            <if test="position != null and position != ''">#{position}, </if>
            <if test="photoUrl != null and photoUrl != ''">#{photoUrl}, </if>
            <if test="address != null and address != ''">#{address}, </if>
            <if test="avidate != null">#{avidate}, </if>
            <if test="memo != null and memo != ''">#{memo}, </if>
            <if test="status != null">#{status}, </if>
            <if test="updator != null">#{updator}, </if>
            <if test="updateTime != null">#{updateTime}, </if>
            <if test="creator != null">#{creator}, </if>
            <if test="createTime != null">#{createTime}, </if>
        </trim>
    </insert>

    <!-- 更新用户： 1.输入用对象 -->
    <update id="update" parameterType="com.mycuckoo.domain.uum.User">
        update <include refid="table" />
        <set>
            <if test="orgId != null">org_id = #{orgId}, </if>
            <if test="accountId != null">account_id = #{accountId}, </if>
            <if test="roleId != null">role_id = #{roleId}, </if>
            <if test="deptId != null">dept_id = #{deptId}, </if>
            <if test="name != null">name = #{name}, </if>
            <if test="pinyin != null">pinyin = #{pinyin}, </if>
            <if test="phone != null">phone = #{phone}, </if>
            <if test="email != null">email = #{email}, </if>
            <if test="gender != null">gender = #{gender}, </if>
            <if test="position != null">position = #{position}, </if>
            <if test="photoUrl != null">photo_url = #{photoUrl}, </if>
            <if test="address != null">address = #{address}, </if>
            <if test="avidate != null">avidate = #{avidate}, </if>
            <if test="memo != null">memo = #{memo}, </if>
            <if test="status != null">status = #{status}, </if>
            <if test="updator != null">updator = #{updator}, </if>
            <if test="updateTime != null">update_time = #{updateTime}, </if>
        </set>
        where user_id = #{userId}
    </update>

    <!-- 删除单个用户 -->
    <delete id="delete" parameterType="long">
        delete from <include refid="table" /> where user_id = #{userId}
    </delete>

    <!--
        获取用户: 输出直接映射到对象
    -->
    <select id="get" parameterType="long" resultMap="baseMap">
        select <include refid="columns" />
        from <include refid="table" />
        where user_id = #{id}
    </select>

    <!-- 返回所有用户,映射到'uumUser'-->
    <select id="findByPage" resultMap="baseMap">
        select
            t1.user_id,
            t1.name,
            t1.pinyin,
            t1.phone,
            t1.email,
            t1.gender,
            t1.address,
            t1.avidate,
            t1.status,
            t1.creator,
            t1.create_time,
            t2.simple_name org_name,
            t5.name role_name
        from <include refid="table" /> t1
        left join cuckoo.uum_organ t2 on t2.org_id = t1.org_id
        left join cuckoo.uum_role t5 on t5.role_id = t1.role_id
        <where>
            <if test="q.name != null and q.name != ''">
                and t1.name like concat('%', #{q.name}, '%')
            </if>
        </where>
        order by t1.user_id desc
    </select>

    <!-- 根据用户代码、用户名称查询用户记录, 演示: 1.输入传入多个参数 2.输出直接映射对象 -->
    <select id="findByName" resultMap="baseMap">
        select
            t1.user_id,
            t1.name
        from <include refid="table" /> t1
        <where>
            <if test="name != null and name != ''">and t1.name like #{name}</if>
        </where>
        order by user_id desc
    </select>

    <!-- 根据拼音代码查询用户信息 -->
    <select id="findByPinyin" parameterType="com.mycuckoo.domain.uum.User" resultType="map">
        select
            user_id userId
            name as "name"
        from <include refid="table" />
        where pinyin like #{pinyin}
        and user_id != #{userId}
    </select>

    <!-- 根据指定的用户ID集合查询用户信息 -->
    <select id="findByUserIds" resultMap="baseMap">
        select
            user_id,
            name
        from <include refid="table" />
        <where> user_id in
        <foreach collection="array" item="userId" open="(" separator="," close=")">
            #{userId}
        </foreach>
        </where>
    </select>

    <select id="findByAccountId" resultMap="baseMap">
        select
            t1.user_id,
            t1.org_id,
            t1.account_id,
            t1.role_id,
            t1.dept_id,
            t1.name,
            t1.avidate,
            t1.status,
            t2.simple_name org_name
        from <include refid="table" /> t1
        inner join cuckoo.uum_organ t2 on t2.org_id = t1.org_id
        where t1.account_id = #{accountId}
        order by t1.user_id desc
    </select>

    <select id="getByAccountIdAndUserId" resultMap="baseMap">
        select
            t1.user_id,
            t1.org_id,
            t1.account_id,
            if(t1.role_id = -1, t2.role_id, t1.role_id) role_id,
            t1.dept_id,
            t1.name,
            t1.pinyin,
            t1.gender,
            t1.position,
            t1.photo_url,
            t1.avidate,
            t1.status,
            t2.simple_name org_name,
            t3.phone,
            t3.email,
            t5.name role_name
        from <include refid="table" /> t1
        inner join cuckoo.uum_organ t2 on t2.org_id = t1.org_id
        inner join cuckoo.uum_account t3 on t3.account_id = t1.account_id
        left join cuckoo.uum_role t5 on t5.role_id = t1.role_id
        where t1.account_id = #{accountId}
        and t1.user_id = #{userId}
    </select>

</mapper> 