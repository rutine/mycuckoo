<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	说明: UumGroupMapper映射文件
	
	@author rutine
	@time Sep 23, 2014 10:32:14 AM
	@version 2.0.0
 -->
<mapper namespace="com.mycuckoo.persistence.uum.group.UumGroupMapper">
	<resultMap id="uumGroup" type="com.mycuckoo.domain.uum.UumGroup">
		<id property="groupId" column="group_id" />
		<result property="groupType" column="group_type" />
		<result property="groupName" column="group_name" />
		<result property="memo" column="memo" />
		<result property="status" column="status" />
		<result property="creator" column="creator" />
		<result property="createDate" column="create_date" />
		<collection property="uumGroupMembers" column="group_id" ofType="com.mycuckoo.domain.uum.UumGroupMember" select="findGroupMembersByGroupId"></collection>
	</resultMap>
	
	<sql id="colums">
		group_id, group_type, group_name, memo, status, creator, create_date
	</sql>

	<!-- 插入分组： 1.由数据库生成id并赋值到UumGroup对象 2.输入用对象 -->
	<insert id="save" parameterType="com.mycuckoo.domain.uum.UumGroup">
		<selectKey keyProperty="groupId" resultType="long" order="BEFORE">
			<include refid="table.UUM_GROUP_SEQ"/>
		</selectKey>
		insert into <include refid="table.uum_group"/>
		(
			group_id, group_type, group_name, memo, status, creator, create_date
		)
		values (
			#{groupId}, #{groupType}, #{groupName}, #{memo}, #{status}, #{creator}, #{createDate}
		)
	</insert>
	
	<!-- 更新分组： 1.输入用对象 -->
	<update id="update" parameterType="com.mycuckoo.domain.uum.UumGroup">
		update 
			<include refid="table.uum_group"/>
		set
			group_type			= #{groupType},
			group_name			= #{groupName},
			memo						= #{memo},
			status					= #{status},
			creator					= #{creator},
			create_date			= #{createDate}
		where 
			group_id = #{groupId}
	</update>
	
	<!-- 删除分组 -->
	<delete id="delete" parameterType="long">
		delete from <include refid="table.uum_group"/> where group_id = #{id}
	</delete>
	
	<!-- 删除一组分组 -->
	<delete id="deleteSome" parameterType="list">
		delete from 
			<include refid="table.uum_group"/> 
		where 
			group_id in
			<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
				#{item}
			</foreach>
	</delete>
	
	<!-- 删除所有分组 -->
	<delete id="deleteAll">
		delete from <include refid="table.uum_group"/>
	</delete>
	
	<!-- 分组是否存在 -->
	<select id="exists" parameterType="long" resultType="boolean">
		select
			count(*) > 0 
		from 
			<include refid="table.uum_group"/>
		where 
			group_id = #{id}
	</select>
	
	<!-- 分组记录总数 -->
	<select id="count" resultType="long">
		select
			count(*) 
		from 
			<include refid="table.uum_group"/>
	</select>
	
	<!--
		获取分组: 映射到 uumGroup
	-->
	<select id="get" parameterType="long" resultMap="uumGroup">
		select 
			*
		from 
			<include refid="table.uum_group"/>
		where 
			group_id = #{id}
	</select>

	<!-- 查询所有分组, 映射到 uumGroup-->
	<select id="findAll" resultMap="uumGroup">
		select 
			*
		from 
			<include refid="table.uum_group"/>
	</select>
	
	<!-- 根据组ID删除组成员 -->
	<delete id="deleteGroupMembersByGroupId" parameterType="map">
		delete from <include refid="table.uum_group_member"/> 
		where group_id = #{groupId} and group_type = #{groupType}
	</delete>
	
	<!-- 根据组名称查询组数量 -->
	<select id="countGroupsByGroupName" parameterType="map" resultType="int">
		select
			count(*) 
		from 
			<include refid="table.uum_group"/>
		where 
			group_name = #{groupName}
		and 
			group_type = #{groupType}
	</select>
	
	<!-- 根据组ID查询所有组成员 -->
	<select id="findGroupMembersByGroupId" 
			parameterType="map" 
			resultMap="com.mycuckoo.persistence.uum.group.UumGroupMemberMapper.uumGroupMember">
		select
			t2.*
		from 
			<include refid="table.uum_group"/> t1
		left join 
			<include refid="table.uum_group_member"/> t2 on t1.group_id = t2.group_id
		where
			<!-- t1.group_type = #{groupType}
		and  -->
			t1.group_id = #{groupId}
	</select>
	
	<!-- 根据条件分页查询组信息 -->
	<select id="findGroupsByCon" 
			parameterType="map" 
			resultMap="com.mycuckoo.persistence.uum.group.UumGroupMapper.uumGroup">
		select
			*
		from 
			<include refid="table.uum_group"/>
		where
			group_type = #{groupType}
		<if test="groupName != null and groupName != ''">
			and group_name like #{groupName}
		</if>
		order by group_id desc
		<if test="start > -1 and limit > 0">
				limit #{limit} offset #{start}
		</if>
	</select>
	
	<!-- 根据条件分页计算组记录数 -->
	<select id="countGroupsByCon" parameterType="map" resultType="int">
		select
			count(*)
		from 
			<include refid="table.uum_group"/>
		where
			group_type = #{groupType}
		<if test="groupName != null and groupName != ''">
			and group_name like #{groupName}
		</if>
	</select>
	
	<!-- 根据组ID修改组状态 -->
	<update id="updateGroupStatus" parameterType="map">
		update 
			<include refid="table.uum_group"/>
		set
			status					= #{status}
		where 
			group_id = #{groupId}
	</update>
	
</mapper> 
