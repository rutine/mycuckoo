<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	说明: UumUserMapper映射文件
	
	@author rutine
	@time Sep 23, 2014 10:23:58 AM
	@version 2.0.0
 -->
<mapper namespace="com.mycuckoo.persistence.uum.UumUserMapper">
	<resultMap id="uumUser" type="com.mycuckoo.domain.uum.UumUser">
		<id property="userId" column="user_id" />
		<result property="userCode" column="user_code" />
		<result property="userNamePy" column="user_name_py" />
		<result property="userName" column="user_name" />
		<result property="userPassword" column="user_password" />
		<result property="userGender" column="user_gender" />
		<result property="userPosition" column="user_position" />
		<result property="userPhotoUrl" column="user_photo_url" />
		<result property="userQq" column="user_qq" />
		<result property="userMsn" column="user_msn" />
		<result property="userMobile" column="user_mobile" />
		<result property="userMobile2" column="user_mobile2" />
		<result property="userOfficeTel" column="user_office_tel" />
		<result property="userFamilyTel" column="user_family_tel" />
		<result property="userAddress" column="user_address" />
		<result property="userEmail" column="user_email" />
		<result property="userAvidate" column="user_avidate" />
		<result property="userIsAgent" column="user_is_agent" />
		<result property="memo" column="memo" />
		<result property="status" column="status" />
		<result property="creator" column="creator" />
		<result property="createDate" column="create_date" />
		<result property="uumOrgan.orgId" column="user_belongto_org" />
		<!-- 其他用途 -->
		<result property="uumOrgRoleId" column="org_role_id" />
		<result property="uumRoleName" column="role_name" />
		<result property="uumOrgName" column="org_simple_name" />
		<!-- <association property="uumOrgan" javaType="com.mycuckoo.domain.uum.UumOrgan" resultMap="com.mycuckoo.persistence.uum.uumOrgan" /> -->
		<!-- <collection property="uumRoleUserRefs" javaType="com.mycuckoo.domain.uum.UumRoleUserRef" resultMap="com.mycuckoo.persistence.uum.uumRoleUserRef" /> -->
	</resultMap>
	
	<sql id="colums">
		user_id, user_belongto_org, user_code, user_name_py, user_name, 
		user_password, user_gender, user_position, user_photo_url, user_qq, 
		user_msn, user_mobile, user_mobile2, user_office_tel, user_family_tel, 
		user_address, user_email, user_avidate, user_is_agent, memo, 
		status, creator, create_date
	</sql>

	<!-- 插入用户： 1.由数据库生成id并赋值到user对象 2.输入用对象, 嵌套属性表达式#{department.id} -->
	<insert id="save" parameterType="com.mycuckoo.domain.uum.UumUser">
		<selectKey keyProperty="userId" resultType="long" order="BEFORE">
			<include refid="table.UUM_USER_SEQ"/>
		</selectKey>
		insert into 
			<include refid="table.uum_user"/> 
		(
			user_id, user_belongto_org, user_code, user_name_py, user_name, 
			user_password, user_gender, user_position, user_photo_url, user_qq, 
			user_msn, user_mobile, user_mobile2, user_office_tel, user_family_tel, 
			user_address, user_email, user_avidate, user_is_agent, memo, 
			status, creator, create_date
		)
		values (
			#{userId}, #{uumOrgan.orgId}, #{userCode}, #{userNamePy}, #{userName}, 
			#{userPassword}, #{userGender}, #{userPosition}, #{userPhotoUrl}, #{userQq}, 
			#{userMsn}, #{userMobile}, #{userMobile2}, #{userOfficeTel}, #{userFamilyTel}, 
			#{userAddress}, #{userEmail}, #{userAvidate}, #{userIsAgent}, #{memo}, 
			#{status}, #{creator}, #{createDate}
		)
	</insert>
	
	<!-- 更新用户： 1.输入用对象, 嵌套属性表达式#{department.id} -->
	<update id="update" parameterType="com.mycuckoo.domain.uum.UumUser">
		update 
			<include refid="table.uum_user"/> 
		set
			user_belongto_org		= #{uumOrgan.orgId},
			user_code						= #{userCode},
			user_name_py				= #{userNamePy},
			user_name						= #{userName},
			user_password				= #{userPassword},
			user_gender					= #{userGender},
			user_position				= #{userPosition},
			user_photo_url			= #{userPhotoUrl},
			user_qq							= #{userQq},
			user_msn						= #{userMsn},
			user_mobile					= #{userMobile},
			user_mobile2				= #{userMobile2},
			user_office_tel			= #{userOfficeTel},
			user_family_tel			= #{userFamilyTel},
			user_address				= #{userAddress},
			user_email					= #{userEmail},
			user_avidate				= #{userAvidate},
			user_is_agent				= #{userIsAgent},
			memo								= #{memo},
			status							= #{status},
			creator							= #{creator},
			create_date					= #{createDate}
		where 
			user_id = #{userId}
	</update>
	
	<!-- 删除单个用户 -->
	<delete id="delete" parameterType="long">
		delete from <include refid="table.uum_user"/> where user_id = #{userId}
	</delete>
	
	<!-- 删除一组用户 -->
	<delete id="deleteSome" parameterType="list">
		delete from 
			<include refid="table.uum_user"/> 
		where 
			user_id in
			<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
				#{item}
			</foreach>
	</delete>
	
	<!-- 删除所有用户 -->
	<delete id="deleteAll">
		delete from <include refid="table.uum_user"/>
	</delete>
	
	<!-- 判断用户是否存在 -->
	<select id="exists" parameterType="long" resultType="boolean">
		select
			count(user_id) > 0
		from 
			<include refid="table.uum_user"/>
		where 
			user_id=#{id}
	</select>
	
	<!-- 统计用户记录总数 -->
	<select id="count" resultType="long">
		select
			count(*) 
		from 
			<include refid="table.uum_user"/>
	</select>
	
	<!--
		获取用户: 输出直接映射到对象, "user_code" 列要 "as userCode" 以方便映射 "user_belongto_org as uumOrgan.orgId" 创建 UumOrgan 对象并赋值
	-->
	<select id="get" parameterType="long" resultType="com.mycuckoo.domain.uum.UumUser">
		select 
			user_id						as userId,
			user_belongto_org	as "uumOrgan.orgId", 
			user_code					as userCode, 
			user_name_py			as userNamePy,
			user_name					as userName, 
			user_password			as userPassword, 
			user_gender				as userGender, 
			user_position			as userPosition, 
			user_photo_url		as userPhotoUrl, 
			user_qq						as userQq, 
			user_msn					as userMsn, 
			user_mobile				as userMobile, 
			user_mobile2			as userMobile2, 
			user_office_tel		as userOfficeTel, 
			user_family_tel		as userFamilyTel, 
			user_address			as userAddress, 
			user_email				as userEmail, 
			user_avidate			as userAvidate, 
			user_is_agent			as userIsAgent, 
			memo							as memo, 
			status						as status, 
			creator						as creator, 
			create_date				as createDate
		from 
			<include refid="table.uum_user"/>
		where 
			user_id=#{id}
	</select>

	<!-- 返回所有用户,映射到'uumUser'-->
	<select id="findAll" resultMap="uumUser">
		select 
			*
		from 
			<include refid="table.uum_user"/>
	</select>
	
	<!-- 以所属机构ID查询用户, 演示: 1.输出直接映射对象 -->
	<select id="findUsersByOrgID" parameterType="long" resultMap="uumUser">
		select 
			<include refid="colums"/>
		from 
			<include refid="table.uum_user"/>
		where
			user_belongto_org = #{id}
	</select>
	
	<!-- 根据用户代码、用户名称、机构ids或角色ids查询用户记录, 演示: 1.输入用map传入多个参数 2.输出直接映射对象 -->
	<select id="findUsersByCon" parameterType="map" resultMap="uumUser">
		select 
			t1.*, t2.org_simple_name, t4.org_role_id, t5.role_name
		from 
			<include refid="table.uum_user"/> t1
		left join 
			<include refid="table.uum_organ"/> t2 on t1.user_belongto_org = t2.org_id 
		left join 
			<include refid="table.uum_role_user_ref"/> t3 on t1.user_id = t3.user_id and is_default = 'Y' <!-- 默认角色 -->
		left join 
			<include refid="table.uum_org_role_ref"/> t4 on t3.org_role_id = t4.org_role_id 
		left join 
			<include refid="table.uum_role"/> t5 on t4.role_id = t5.role_id
		<where>
			<if test="orgIds != null">t1.user_belongto_org in 
				<foreach collection="orgIds" item="orgId" open="(" separator="," close=")">#{orgId}</foreach> 
			</if>
			<if test="orgRoleId != null">
				t1.user_id in (select st1.user_id from <include refid="table.uum_role_user_ref"/> st1 where st1.org_role_id = #{orgRoleId})
			</if>
			<if test="userCode != null and userCode != ''">and t1.user_code like #{userCode}</if>
			<if test="userName != null and userName != ''">and t1.user_name like #{userName}</if>
		</where>
			order by 
				user_id desc
			<if test="start > -1 and limit > 0">
				limit #{limit} offset #{start}
			</if>
	</select>
	
	<!-- 根据用户代码、用户名称、机构ids或角色ids查询用户记录总数 -->
	<select id="countUsersByCon" parameterType="map" resultType="long">
		select count(*)
		from 
			<include refid="table.uum_user"/> t1
		left join 
			<include refid="table.uum_organ"/> t2 on t1.user_belongto_org = t2.org_id 
		left join 
			<include refid="table.uum_role_user_ref"/> t3 on t1.user_id = t3.user_id and is_default = 'Y' <!-- 默认角色 -->
		left join 
			<include refid="table.uum_org_role_ref"/> t4 on t3.org_role_id = t4.org_role_id 
		left join 
			<include refid="table.uum_role"/> t5 on t4.role_id = t5.role_id
		<where>
			<if test="orgIds != null">t1.user_belongto_org in 
				<foreach collection="orgIds" item="orgId" open="(" separator="," close=")">#{orgId}</foreach> 
			</if>
			<if test="orgRoleId != null">
				t1.user_id in (select st1.user_id from <include refid="table.uum_role_user_ref"/> st1 where st1.org_role_id = #{orgRoleId})
			</if>
			<if test="userCode != null and userCode != ''">and t1.user_code like #{userCode}</if>
			<if test="userName != null and userName != ''">and t1.user_name like #{userName}</if>
			</where>
	</select>
	
	<!-- 查询用户,演示: 1.输入用map传入多个参数 2.<where>语句, 智能添加where和and关键字 3.输出直接映射对象 -->
	<select id="getUserByUserCodeAndPwd" parameterType="com.mycuckoo.domain.uum.UumUser" resultMap="uumUser">
		select 
			<include refid="colums"/>
		from 
			<include refid="table.uum_user"/>
		where
			user_code = #{userCode}
		<if test="userPassword != null and userPassword != ''">and user_password = #{userPassword}</if>
	</select>
	
	<!-- 判断用户号是否存在 -->
	<select id="existsUserByUserCode" parameterType="string" resultType="boolean">
		select
			count(*) > 0
		from 
			<include refid="table.uum_user"/>
		where 
			user_code = #{user_code}
	</select>
	
	<!-- 更新用户信息 1.输入用对象 -->
	<update id="updateUserByProps" parameterType="com.mycuckoo.domain.uum.UumUser">
		update 
				<include refid="table.uum_user"/> 
		set
		<if test="belongOrganId != null">
			user_belongto_org = #{belongOrganId}
		</if> 
		<if test="userPassword != null">
			user_password 	= #{userPassword}
		</if> 
		<if test="userPhotoUrl != null">
			user_photo_url 	= #{userPhotoUrl}
		</if> 
		where user_id = #{userId}
	</update>
	
	<!-- 根据拼音代码查询用户信息 -->
	<select id="findUsersByUserNamePy" parameterType="com.mycuckoo.domain.uum.UumUser" resultType="map">
		select
			user_id as "userId",
			user_name as "userName"
		from 
			<include refid="table.uum_user"/>
		where 
			user_name_py like #{userNamePy}
		and
			user_id != #{userId}
	</select>
	
	<!-- 根据指定的用户ID集合查询用户信息 -->
	<select id="findUsersByUserIds" resultType="map">
		select
			user_id as "userId",
			user_name as "userName"
		from 
			<include refid="table.uum_user"/>
		<where>
			user_id in
			<foreach collection="array" item="userId" open="(" separator="," close=")">
				#{userId}
			</foreach>
		</where>
	</select>
	
</mapper> 